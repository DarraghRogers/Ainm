// <auto-generated />
using System;
using Ainm.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Ainm.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250831025514_forgot password props")]
    partial class forgotpasswordprops
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Ainm.API.Models.BabyName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Meaning")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BabyNames");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Popular girl's name.",
                            Gender = "F",
                            Meaning = "Life",
                            Name = "Ava",
                            Origin = "Hebrew"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Popular boy's name.",
                            Gender = "M",
                            Meaning = "Strong-willed warrior",
                            Name = "Liam",
                            Origin = "Irish"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Classic boy's name.",
                            Gender = "M",
                            Meaning = "Rest, comfort",
                            Name = "Noah",
                            Origin = "Hebrew"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Timeless girl's name.",
                            Gender = "F",
                            Meaning = "Whole or universal",
                            Name = "Emma",
                            Origin = "German"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Nature-inspired boy's name.",
                            Gender = "M",
                            Meaning = "Olive tree",
                            Name = "Oliver",
                            Origin = "Latin"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Elegant girl's name.",
                            Gender = "F",
                            Meaning = "Wisdom",
                            Name = "Sophia",
                            Origin = "Greek"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Biblical boy's name.",
                            Gender = "M",
                            Meaning = "My God is Yahweh",
                            Name = "Elijah",
                            Origin = "Hebrew"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Short and sweet girl's name.",
                            Gender = "F",
                            Meaning = "Mine",
                            Name = "Mia",
                            Origin = "Italian"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Classic and strong boy's name.",
                            Gender = "M",
                            Meaning = "Supplanter",
                            Name = "James",
                            Origin = "Hebrew"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Beautiful girl's name.",
                            Gender = "F",
                            Meaning = "God is my oath",
                            Name = "Isabella",
                            Origin = "Hebrew"
                        });
                });

            modelBuilder.Entity("Ainm.API.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BabyNameId")
                        .HasColumnType("integer");

                    b.Property<int>("UserAId")
                        .HasColumnType("integer");

                    b.Property<int>("UserBId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("Ainm.API.Models.Swipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BabyNameId")
                        .HasColumnType("integer");

                    b.Property<bool>("Liked")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Swipes");
                });

            modelBuilder.Entity("Ainm.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PartnerId")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PasswordResetTokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PartnerId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PartnerInvite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Accepted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InviteCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InviteeEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InviterUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PartnerInvite");
                });

            modelBuilder.Entity("Partnership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserAId")
                        .HasColumnType("integer");

                    b.Property<int>("UserBId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Partnerships");
                });

            modelBuilder.Entity("Ainm.API.Models.User", b =>
                {
                    b.HasOne("Ainm.API.Models.User", "Partner")
                        .WithMany()
                        .HasForeignKey("PartnerId");

                    b.Navigation("Partner");
                });
#pragma warning restore 612, 618
        }
    }
}
